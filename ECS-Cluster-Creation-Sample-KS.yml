AWSTemplateFormatVersion: "2010-09-09"
Description: This template will create KSClass environment using ECS

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances

  EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String

  InstanceType:
      Description: Which instance type should we use to build the ECS cluster?
      Type: String
      Default: t2.medium
      AllowedValues:
       - t2.micro
       - t2.small
       - t2.medium
       - m5.medium
       - m5.large
       - c4.large
      ConstraintDescription: must be a valid EC2 instance type.

  ClusterSize:
      Description: How many ECS hosts do you want to initially deploy?
      Type: Number
      Default: 2

  VPC:
      Description: Choose which VPC this ECS cluster should be deployed to
      Type: AWS::EC2::VPC::Id

  Subnets:
      Description: Choose which subnets this ECS cluster should be deployed to
      Type: List<AWS::EC2::Subnet::Id>

Mappings:
 AWSRegionToAMI:
  us-west-2:
   AMIID: "ami-03hkjh687t8768566abb"

Resources:
 KSClassCluster:
  Type: AWS::ECS::Cluster
  Properties:
   ClusterName: !Join ["", [!Ref "AWS::StackName", "-Cluster"]]


 FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EFS

 ECSSecurityGroup:
     Type: AWS::EC2::SecurityGroup
     Properties:
       GroupName: !Join ["", [!Ref "AWS::StackName", "-SG"]]
       GroupDescription: "Security Group for AWS EC2 Instances"
       SecurityGroupIngress:
         - IpProtocol: tcp
           FromPort: 5432
           ToPort: 5432
           CidrIp: 10.0.0.0/8
         - IpProtocol: tcp
           FromPort: 3000
           ToPort: 3000
           CidrIp: 10.0.0.0/8
         - IpProtocol: tcp
           FromPort: 3001
           ToPort: 3001
           CidrIp: 10.0.0.0/8
         - IpProtocol: tcp
           FromPort: 8080
           ToPort: 8080
           CidrIp: 10.0.0.0/8
         - IpProtocol: tcp
           FromPort: 22
           ToPort: 22
           CidrIp: 10.0.0.0/8
       Tags:
         - Key: Name
           Value: !Join ["", [!Ref "AWS::StackName", "-SG"]]
       VpcId: !Ref VPC


 ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
        VPCZoneIdentifier: !Ref Subnets
        LaunchConfigurationName: !Ref ECSLaunchConfiguration
        MinSize: !Ref ClusterSize
        MaxSize: !Ref ClusterSize
        DesiredCapacity: !Ref ClusterSize
        Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} ECS host
              PropagateAtLaunch: true

 ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
        ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMIID]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroups:
            - !Ref ECSSecurityGroup
        IamInstanceProfile: !Ref ECSInstanceProfile
        UserData:
         "Fn::Base64": !Sub |
           #!/bin/bash
           yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
           yum install -y aws-cfn-bootstrap amazon-efs-utils
           /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource ECSLaunchConfiguration --configsets Install --region ${AWS::Region}
           stop ecs
           PATH=$PATH:/usr/local/bin
           yum update -y
           EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`
           EC2_REGION=${AWS::Region}
           mkdir /mnt/efs
           EFS_FILE_SYSTEM_ID=${FileSystem}
           DIR_SRC=$EC2_AVAIL_ZONE.$EFS_FILE_SYSTEM_ID.efs.$EC2_REGION.amazonaws.com
           DIR_TGT=/mnt/efs
           touch /home/ec2-user/echo.res
           echo $EFS_FILE_SYSTEM_ID >> /home/ec2-user/echo.res
           echo $EC2_AVAIL_ZONE >> /home/ec2-user/echo.res
           echo $EC2_REGION >> /home/ec2-user/echo.res
           echo $DIR_SRC >> /home/ec2-user/echo.res
           echo $DIR_TGT >> /home/ec2-user/echo.res
           cp -p /etc/fstab /etc/fstab.back-$(date +%F)
           echo -e "$EFS_FILE_SYSTEM_ID:/  $DIR_TGT  efs  defaults,_netdev 0 0" >> /etc/fstab
           mount -a

           echo ECS_CLUSTER=${KSClassCluster} >> /etc/ecs/ecs.config

           docker ps
           service docker stop
           service docker start
           start ecs
           docker ps

           /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
           pip install boto3 --upgrade

 ECSRole:
    Type: AWS::IAM::Role
    Properties:
        Path: /
        RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
        AssumeRolePolicyDocument: |
            {
                "Statement": [{
                    "Action": "sts:AssumeRole",
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "ec2.amazonaws.com"
                    }
                }]
            }
        Policies:
            - PolicyName: ecs-service
              PolicyDocument: |
                {
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "ecs:CreateCluster",
                            "ecs:DeregisterContainerInstance",
                            "ecs:DiscoverPollEndpoint",
                            "ecs:Poll",
                            "ecs:RegisterContainerInstance",
                            "ecs:StartTelemetrySession",
                            "ecs:Submit*",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents",
                            "ecr:BatchCheckLayerAvailability",
                            "ecr:BatchGetImage",
                            "ecr:GetDownloadUrlForLayer",
                            "ecr:GetAuthorizationToken",
                            "ssm:DescribeAssociation",
                            "ssm:GetDeployablePatchSnapshotForInstance",
                            "ssm:GetDocument",
                            "ssm:GetManifest",
                            "ssm:GetParameters",
                            "ssm:ListAssociations",
                            "ssm:ListInstanceAssociations",
                            "ssm:PutInventory",
                            "ssm:PutComplianceItems",
                            "ssm:PutConfigurePackageResult",
                            "ssm:UpdateAssociationStatus",
                            "ssm:UpdateInstanceAssociationStatus",
                            "ssm:UpdateInstanceInformation",
                            "ec2messages:AcknowledgeMessage",
                            "ec2messages:DeleteMessage",
                            "ec2messages:FailMessage",
                            "ec2messages:GetEndpoint",
                            "ec2messages:GetMessages",
                            "ec2messages:SendReply",
                            "cloudwatch:PutMetricData",
                            "ec2:DescribeInstanceStatus",
                            "ds:CreateComputer",
                            "ds:DescribeDirectories",
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:DescribeLogGroups",
                            "logs:DescribeLogStreams",
                            "logs:PutLogEvents",
                            "s3:PutObject"
                        ],
                        "Resource": "*"
                    }]
                }

 ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
        Path: /
        Roles:
            - !Ref ECSRole

 KSClassECSTaskRole:
   Type: AWS::IAM::Role
   Properties:
     AssumeRolePolicyDocument:
       Version: "2012-10-17"
       Statement:
         - Effect: "Allow"
           Principal:
             Service:
               - "ecs-tasks.amazonaws.com"
           Action:
             - "sts:AssumeRole"
     Path: /
     RoleName: !Join ["", [!Ref "AWS::StackName", "-ECSTaskRole"]]
     ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess
     Policies:
        - PolicyName: ecs-tasks
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource: '*'

 KSClassServiceRole:
   Type: AWS::IAM::Role
   Properties:
     AssumeRolePolicyDocument:
       Statement:
         - Effect: Allow
           Principal:
             Service:
               - ecs.amazonaws.com
           Action:
             - sts:AssumeRole
     Path: /
     RoleName: !Join ["",[!Ref "AWS::StackName", "-ECSService-Role"]]
     Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - ec2:Describe*
                  - ec2:AuthorizeSecurityGroupIngress
                Resource: '*'

Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref KSClassCluster

    ECSAutoScalingGroupName:
        Description: A reference to ECS AutoScaling Group Name
        Value: !Ref ECSAutoScalingGroup
