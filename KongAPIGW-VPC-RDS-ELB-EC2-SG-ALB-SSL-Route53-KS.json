{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Kong CloudFormation template.Template creates load balanced Kong instances with Postgres RDS instance in a new VPC or user provided VPC",
  "Parameters": {
    "VpcId" : {
      "Type" : "String",
      "Description" : "Optional - VPC Id of existing VPC. Leave blank to have a new VPC created",
      "Default" : "vpc-972942khfkhfsf",
      "ConstraintDescription" : "VPC ID must begin with 'vpc-' or leave blank to have a new VPC created"
    },
    "SubnetId1DMZA" : {
      "Type" : "String",
      "Description" : "Conditional- required if VpcId provided. Existing VPC Subnet Id 1 where EC2 instances will run",
      "Default" : "subnet-flafjafjwew",
      "ConstraintDescription" : "must be the Subnet Id of an existing Subnet ."
    },
    "SubnetId2DMZB" : {
      "Type" : "String",
      "Description" : "Conditional- required if VpcId provided. Existing VPC Subnet 2 Id where EC2 instances will run",
      "Default" : "subnet-faefafdafeeee",
      "ConstraintDescription" : "must be the Subnet Id of an existing Subnet ."
    },
    "SubnetId3DMZC" : {
      "Type" : "String",
      "Description" : "Conditional- required if VpcId provided. Existing VPC Subnet Id 3 where EC2 instances will run",
      "Default" : "subnet-dffwfrwrwrw",
      "ConstraintDescription" : "must be the Subnet Id of an existing Subnet ."
    },
    "SubnetId4DataA" : {
      "Type" : "String",
      "Description" : "Conditional- required if VpcId provided. Existing VPC Subnet 4 Id where EC2 instances will run",
      "Default" : "subnet-hkjhkjgpgipgiu",
      "ConstraintDescription" : "must be the Subnet Id of an existing Subnet ."
    },
    "SubnetId5DataB" : {
      "Type" : "String",
      "Description" : "Conditional- required if VpcId provided. Existing VPC Subnet 5 Id where EC2 instances will run",
      "Default" : "subnet-khohhhhoihoiho",
      "ConstraintDescription" : "must be the Subnet Id of an existing Subnet ."
    },
    "SubnetId6DataC" : {
      "Type" : "String",
      "Description" : "Conditional- required if VpcId provided. Existing VPC Subnet 6 Id where EC2 instances will run",
      "Default" : "subnet-ohoihlkhhoi",
      "ConstraintDescription" : "must be the Subnet Id of an existing Subnet ."
    },
    "SubnetId7AppA" : {
      "Type" : "String",
      "Description" : "Conditional- required if VpcId provided. Existing VPC Subnet 7 Id where EC2 instances will run",
      "Default" : "subnet-hhjlkjlkjj",
      "ConstraintDescription" : "must be the Subnet Id of an existing Subnet ."
    },
    "SubnetId8AppB" : {
      "Type" : "String",
      "Description" : "Conditional- required if VpcId provided. Existing VPC Subnet 8 Id where EC2 instances will run",
      "Default" : "subnet-lkhljnlknlk",
      "ConstraintDescription" : "must be the Subnet Id of an existing Subnet ."
    },
    "SubnetId9AppC" : {
      "Type" : "String",
      "Description" : "Conditional- required if VpcId provided. Existing VPC Subnet 9 Id where EC2 instances will run",
      "Default" : "subnet-khojjojojoj",
      "ConstraintDescription" : "must be the Subnet Id of an existing Subnet ."
    },
    "Subnet1AZ" : {
      "Type" : "String",
      "Description" : "Conditional- required if VpcId provided or if *-1a AZ not supported by account. Existing VPC Subnet 1 AvailabilityZone",
      "Default" : "us-west-2a"
    },
    "Subnet2AZ" : {
      "Type" : "String",
      "Description" : "Conditional- required if VpcId provided or *-1b AZ not supported by account or if Subnet2AZ provided. Existing VPC Subnet 2 AvailabilityZone",
      "Default" : "us-west-2b"
    },
    "Subnet3AZ" : {
      "Type" : "String",
      "Description" : "Conditional- required if VpcId provided or if *-1c AZ not supported by account. Existing VPC Subnet 1 AvailabilityZone",
      "Default" : "us-west-2c"
    },
    "AppInternetGateway" : {
      "Type" : "String",
      "Description" : "Conditional- required if InternetGateway provided. Existing InternetGateway Attaching",
      "Default" : "igw-9867knbiy98y2r242"
    },
    "NATGatewayAppA" : {
      "Type" : "String",
      "Description" : "Conditional- required if InternetGateway provided. Existing InternetGateway Attaching",
      "Default" : "nat-9y982y4984294u2"
    },
    "NATGatewayAppB" : {
      "Type" : "String",
      "Description" : "Conditional- required if InternetGateway provided. Existing InternetGateway Attaching",
      "Default" : "nat-23424234242"
    },
    "NATGatewayAppC" : {
      "Type" : "String",
      "Description" : "Conditional- required if InternetGateway provided. Existing InternetGateway Attaching",
      "Default" : "nat-24242lhhlkhkhkjhk"
    },

    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the Kong and Postgres EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.4.2.0\/20",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x\/x."
    },
    "BastionSecurityGroupID": {
        "Description": "ID of the bastion host security group to enable SSH connections (e.g., sg-7876285nhidw9)",
        "Type": "AWS::EC2::SecurityGroup::Id",
        "Default": "sg-hlkjh24l24h24h24"

    },
    "MainSecurityGroupIds1" : {
      "Type" : "String",
      "Description" : "Conditional- required if GENERIC security group provided. Existing GSecurity group Attaching",
      "Default" : "sg-786872bkjkhnlnlkn",
      "ConstraintDescription" : "must be the Security group Id of an existing SG ."
    },
    "DefaultSecurityGroupIds1" : {
      "Type" : "String",
      "Description" : "Conditional- required if InternetGateway provided. Existing SG Attaching for LB ",
      "Default" : "sg-09797bkhihkb80970970",
      "ConstraintDescription" : "must be the Security group Id of an existing SG ."
    },

    "Certificate1ARN" : {
        "Type" : "String",
        "Description" : "The ARN for the first certificate of *.practice.ksclass.ksclass.com",
        "Default" : "arn:aws:iam::69868686687657:server-certificate/wildcard.practice.ksclass.ksclass.com",
        "ConstraintDescription" : "must be the ARN of an existing certificate"
    },
    "DNSHostedZoneName": {
       "Description": "The route53 HostedZoneName. For example, \"mydomain.com.\"  Don't forget the period at the end.",
       "Type": "String",
       "Default" : "practice.ksclass.ksclass.com",
       "ConstraintDescription" : "must be the exact one what you're going to use the hosted zone.Default is example "
      },
    "DNSHostedZoneId": {
         "Description": "The route53 DNSHostedZoneId. For example, \"OYOIHKddwwJHIHH\"  Don't forget the period at the end.",
         "Type": "String",
         "Default" : "ZJHGUYGTYIUHEHON.",
         "ConstraintDescription" : "must be the exact one what you're going to use the hostedzoneId.Default is example "
        },
    "SubdomainRecord": {
       "Description": "The subdomain of the dns entry. For example, hello -> hello.mydomain.com, hello is the subdomain.",
       "Type": "String",
       "Default" : "ksclassverion3",
       "ConstraintDescription" : "Can be used the subdomain record name as ksclassverion .Default one is the example "
    },
    "OperatorEMail": {
      "Description": "EMail address to notify if there are any scaling operations",
      "Type": "String",
      "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
      "Default" : "ksclass@gmail.com",
      "ConstraintDescription": "must be a valid email address."
    },
    "PublicRouteTableDMZA": {
      "Description": "Enter Public Route Table ID of Application DMZ -RT. (Skip if Not Including Public)",
      "Type": "String",
      "Default": "rtb-9879hlkfahjoifhafha",
      "ConstraintDescription" : "must be the Public route table Id of an existing Public RT ."
     },
     "PublicRouteTableDMZB": {
       "Description": "Enter Public Route Table ID. (Skip if Not Including Public)",
       "Type": "String",
       "Default": "rtb-xxxxx",
       "ConstraintDescription" : "must be the Public route table Id of an existing Public RT ."
      },
      "PublicRouteTableDMZC": {
        "Description": "Enter Public Route Table ID. (Skip if Not Including Public)",
        "Type": "String",
        "Default": "rtb-xxxxx",
        "ConstraintDescription" : "must be the Public route table Id of an existing Public RT ."
       },
       "PrivateRouteTableApplicationA": {
         "Description": "Enter Public Route Table ID of DMZRT-A. (Skip if Not Including Public)",
         "Type": "String",
         "Default": "rtb-xxxxxx",
         "ConstraintDescription" : "must be the Private route table Id of an existing Private RT ."
        },
        "PrivateRouteTableApplicationB": {
          "Description": "Enter Public Route Table ID of DMZRT-B. (Skip if Not Including Public)",
          "Type": "String",
          "Default": "rtb-xxxxxx",
          "ConstraintDescription" : "must be the Private route table Id of an existing Private RT ."
         },
         "PrivateRouteTableApplicationC": {
           "Description": "Enter Public Route Table ID of DMZRT-C. (Skip if Not Including Public)",
           "Type": "String",
           "Default": "rtb-xxxxxx",
           "ConstraintDescription" : "must be the Private route table Id of an existing Private RT ."
          },
         "PublicNetworkAclDMZ": {
           "Description": "Enter Public Network ACL ID of DMZ network. (Skip if Not Including Public)",
           "Type": "String",
           "Default": "acl-xxxxx",
           "ConstraintDescription" : "must be the Public NACL Id of an existing Public NACL ."
          },
          "PrivateNetworkAclApplication": {
            "Description": "Enter Private Network ACL ID if you're restricting.",
            "Type": "String",
            "Default": "acl-xxxx",
            "ConstraintDescription" : "must be the Prite NACL Id of an existing Private NACL ."
          },

    "KongProxyAccess": {
      "Description": "The IP address range that can be used to access the Kong proxy port 8000",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.2.24.0\/20",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x\/x."
    },
    "KongAdminAccess": {
      "Description": "The IP address range that can be used to access the Kong Admin port 8001",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.4.24.0\/20",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x\/x."
    },
    "KongKeyName": {
      "Description": "Required- Name of an existing EC2 KeyPair to enable SSH access to the instances for Kong",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "ksclasskeypair",
      "ConstraintDescription" : "must be the Key Name of an existing KeyPair ."

    },
    "KongFleetMaxSize": {
      "Description": "Max Number of Kong instances in cluster ASG",
      "Type": "Number",
      "Default": "2",
      "MinValue": "1"
    },
    "KongFleetDesiredSize": {
      "Description": "Desired Number of Kong instances",
      "Type": "Number",
      "Default": "2",
      "MinValue": "1"
    },
    "KongInstanceType": {
      "Description": "Kong EC2 instance type. Note: T2 instance is not supported on the EC2-Classic platform (VPC)",
      "Type": "String",
      "Default": "t2.medium",
      "AllowedValues": [
        "t2.small",
        "t2.micro",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    }
  },
  "Mappings": {
    "RegionKongAmiMap": {
      "us-east-1": {
        "HVM": "ami-a4c7dddedb2"
      },
      "us-east-2": {
        "HVM": "ami-a922d0ddd9ed1"
      },
      "us-west-1": {
        "HVM": "ami-327425252f5352"
      },
      "us-west-2": {
        "HVM": "ami-05fa22424242424cb3672"
      },
      "eu-west-1" : {
        "HVM": "ami-d7b9a222dq2b1"
      },
      "eu-west-2" : {
        "HVM": "ami-ed100ffff689"
      },
      "eu-central-1" : {
        "HVM": "ami-87dar22rks1eb"
      },
      "ap-southeast-1" : {
        "HVM": "ami-77arrr2r2f2014"
      },
      "ap-southeast-2" : {
        "HVM": "ami-10r2r2r2r9183"
      },
      "sa-east-1" : {
        "HVM" : "ami-87d1eb"
      }
    }
  },
  "Conditions" : {
    "CreateRDS" : {"Fn::Equals" : [{"Ref" : "DBHost"}, ""]},
    "CreateVpcResources" : { "Fn::Equals" : [ { "Ref" : "VpcId" }, "" ] },
    "UseAZParameter": { "Fn::Not" : [ {"Fn::And" : [ { "Fn::Equals" : [ { "Ref" : "Subnet1AZ" }, "" ]} , { "Fn::Equals" : [ { "Ref" : "Subnet2AZ" }, "" ] } ] } ] },
    "ExistingVpcResources" : { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "VpcId" }, "" ] } ] },
    "UseDbSnapshot" : {
      "Fn::Not" : [{
        "Fn::Equals" : [
          {"Ref" : "DBSnapshotIdentifier"},
          ""
        ]
      }]
    }
  },
  "Resources": {
   "VPC" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16",
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },
    "PublicSubnet1" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.8.0/20",
        "AvailabilityZone" : { "Fn::If" : [ "UseAZParameter", { "Ref" : "Subnet1AZ" }, { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] } ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },
    "PublicSubnet2" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.14.0/20",
        "AvailabilityZone" : { "Fn::If" : [ "UseAZParameter", { "Ref" : "Subnet2AZ" }, { "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] } ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },
    "PublicSubnet3" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.16.0/20",
        "AvailabilityZone" : { "Fn::If" : [ "UseAZParameter", { "Ref" : "Subnet3AZ" }, { "Fn::Select" : [ "2", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] } ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },
    "PrivateSubnet4" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.24.0/22",
        "AvailabilityZone" : { "Fn::If" : [ "UseAZParameter", { "Ref" : "Subnet1AZ" }, { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] } ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },
    "PrivateSubnet5" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.28.0/22",
        "AvailabilityZone" : { "Fn::If" : [ "UseAZParameter", { "Ref" : "Subnet2AZ" }, { "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] } ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },
    "PrivateSubnet6" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.32.0/22",
        "AvailabilityZone" : { "Fn::If" : [ "UseAZParameter", { "Ref" : "Subnet3AZ" }, { "Fn::Select" : [ "2", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] } ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },

    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VpcId" },
         "InternetGatewayId" : { "Ref" : "AppInternetGateway" }
       }
    },
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [ { "Endpoint": { "Ref": "OperatorEMail" }, "Protocol": "email" } ]
      }
    },

    "PublicRouteTableDMZ" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VpcId" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "PrivateRouteTableApp" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VpcId"},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },

    "PublicRouteDMZ": {
      "DependsOn": "AttachGateway",
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref": "PublicRouteTableDMZ" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref": "AppInternetGateway" }
      }
    },

    "PrivateRouteApp": {
      "DependsOn": [ "AttachGateway" ],
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref": "AppInternetGateway" },
        "RouteTableId" : { "Ref": "PrivateRouteTableApp" }
      }
    },

    "SubnetId1DMZARouteTableAssociation" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetId1DMZA" },
        "RouteTableId" : [{ "Ref": "PublicRouteTableDMZ" }]
      }
    },
    "SubnetId2DMZBRouteTableAssociation" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetId2DMZB" },
        "RouteTableId" : [{ "Ref": "PublicRouteTableDMZ" }]
      }
    },
    "SubnetId3DMZCRouteTableAssociation" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetId3DMZC" },
        "RouteTableId" : [{ "Ref": "PublicRouteTableDMZ" }]
      }
    },

    "SubnetId4DataARouteTableAssociation" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetId4DataA" },
        "RouteTableId" : [{ "Ref": "PrivateRouteTableApp" }]
      }
    },
    "SubnetId5DataBRouteTableAssociation" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetId5DataB" },
        "RouteTableId" : [{ "Ref": "PrivateRouteTableApp" }]
      }
    },
    "SubnetId6DataCRouteTableAssociation" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetId6DataC" },
        "RouteTableId" : [{ "Ref": "PrivateRouteTableApp" }]
      }
    },

    "KongLoadBalancerNewVPC": {
        "Condition" : "CreateVpcResources",
        "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
        "Properties": {
          "SecurityGroups" : [ { "Ref" : "LoadBalancerSecurityGroup" } ],
          "Subnets" : [ { "Ref" : "PublicSubnet1" }, { "Ref" : "PublicSubnet2" }, { "Ref" : "PublicSubnet3" } ],
          "CrossZone" : "true",
          "Listeners": [
            {
              "LoadBalancerPort": "8000",
              "InstancePort": "8000",
              "Protocol": "HTTP"
            },
            {
              "LoadBalancerPort": "8001",
              "InstancePort": "8001",
              "Protocol": "HTTP"
            }
          ],
          "HealthCheck": {
            "Target": "TCP:8000",
            "HealthyThreshold": "3",
            "UnhealthyThreshold": "5",
            "Interval" : "90",
            "Timeout" : "60"
          }
        }
      },

    "KongLoadBalancerExistingVPC" : {
      "Condition" : "ExistingVpcResources",
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Subnets" : [{ "Ref" : "SubnetId1DMZA" }, { "Ref" : "SubnetId2DMZB" },{ "Ref" : "SubnetId3DMZC" }],
        "Scheme": "internal",
        "SecurityGroups" :  [{ "Ref" : "MainSecurityGroupIds1" },{ "Ref" : "LoadBalancerSecurityGroup" } ]
      }
    },
    "LoadBalancerListener1": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "ALBTargetGroup1" }
        }],
        "LoadBalancerArn": { "Ref": "KongLoadBalancerExistingVPC" },
            "Port": 443,
            "Protocol": "HTTPS",
            "Certificates" : [
              { "CertificateArn" :
                { "Ref" : "Certificate1ARN"
                }
              }
            ]
          }
    },
    "LoadBalancerListener2": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "ALBTargetGroup2" }
        }],
        "LoadBalancerArn": { "Ref": "KongLoadBalancerExistingVPC" },
            "Port": 8443,
            "Protocol": "HTTPS",
            "Certificates" : [
              { "CertificateArn" :
                { "Ref" : "Certificate1ARN"
                }
              }
            ]
          }
    },
    "ALBTargetGroup1": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "ALBTargetGroup1" ] ] },
        "Port": 8000,
        "Protocol": "HTTP",
        "UnhealthyThresholdCount" : 5,
        "HealthCheckIntervalSeconds" : 30,
        "HealthCheckTimeoutSeconds" : 5,
        "HealthyThresholdCount" : 3,
        "VpcId": { "Ref": "VpcId" }
      }
    },

    "ALBTargetGroup2": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "ALBTargetGroup2" ] ] },
        "Port": 8001,
        "Protocol": "HTTP",
        "UnhealthyThresholdCount" : 5,
        "HealthCheckIntervalSeconds" : 30,
        "HealthCheckTimeoutSeconds" : 5,
        "HealthyThresholdCount" : 3,
        "VpcId": { "Ref": "VpcId" }
      }
    },

    "LoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP and HTTPS access on port 8443,8444,8000 and 8001",
        "VpcId" : { "Fn::If" : [ "CreateVpcResources", { "Ref" : "VPC" }, { "Ref" : "VpcId" } ] },
        "SecurityGroupIngress" : [
                         { "IpProtocol" : "tcp", "FromPort" : "8000", "ToPort" : "8000", "SourceSecurityGroupId" : { "Ref" : "MainSecurityGroupIds1" } },
                         { "IpProtocol" : "tcp", "FromPort" : "8000", "ToPort" : "8000", "CidrIp" : "11.24.11.0/24" },
                         { "IpProtocol" : "tcp", "FromPort" : "8001", "ToPort" : "8001", "CidrIp" : "11.244.131.0/24" },
                         { "IpProtocol" : "tcp", "FromPort" : "8000", "ToPort" : "8000", "CidrIp" : "21.244.11.0/24" },
                         { "IpProtocol" : "tcp", "FromPort" : "8001", "ToPort" : "8001", "CidrIp" : "11.24.11.0/24" },
                         { "IpProtocol" : "tcp", "FromPort" : "8000", "ToPort" : "8000", "CidrIp" : "11.24.11.0/24" },
                         { "IpProtocol" : "tcp", "FromPort" : "8001", "ToPort" : "8001", "CidrIp" : "11.24.11.0/24" },
                         { "IpProtocol" : "tcp", "FromPort" : "8001", "ToPort" : "8001", "SourceSecurityGroupId" : { "Ref" : "MainSecurityGroupIds1" } },
                         { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" },
                         { "IpProtocol" : "tcp", "FromPort" : "8443", "ToPort" : "8443", "CidrIp" : "0.0.0.0/0" },
                         { "IpProtocol" : "tcp", "FromPort" : "8443", "ToPort" : "8443", "SourceSecurityGroupId" : { "Ref" : "MainSecurityGroupIds1" } }
                       ],
        "SecurityGroupEgress" :  [
                        { "IpProtocol" : "tcp", "FromPort" : "1", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" }
                       ]
      }
    },
    "KongScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy": {
        "ResourceSignal": {
          "Count"   : "0",
          "Timeout": "PT15M"
        }
  	   },
      "Properties": {
        "AvailabilityZones" : { "Fn::If" : [ "CreateVpcResources", [{ "Fn::GetAtt" : [ "PublicSubnet1", "AvailabilityZone" ] }, { "Fn::GetAtt" : [ "PublicSubnet2", "AvailabilityZone" ] }, { "Fn::GetAtt" : [ "PublicSubnet3", "AvailabilityZone" ] }], [{ "Ref" : "Subnet1AZ" }, { "Ref" : "Subnet2AZ" }, { "Ref" : "Subnet3AZ" }]]},
        "VPCZoneIdentifier" : { "Fn::If" : [ "CreateVpcResources", [ { "Fn::Join" : [",", [ { "Ref" : "PublicSubnet1" }, { "Ref" : "PublicSubnet2" }, { "Ref" : "PublicSubnet3" } ] ] } ], [{ "Ref" : "SubnetId1DMZA" }, { "Ref" : "SubnetId2DMZB" }, { "Ref" : "SubnetId3DMZC" }]]},
        "LaunchConfigurationName": {
          "Ref": "KongLaunchConfig"
        },
        "MinSize": "1",
        "MaxSize": "3",
        "DesiredCapacity": "2",
        "TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup1" }, { "Ref" : "ALBTargetGroup2" } ],
        "NotificationConfiguration" : {
          "TopicARN" : { "Ref" : "NotificationTopic" },
          "NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                                  "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                  "autoscaling:EC2_INSTANCE_TERMINATE",
                                  "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
        },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Ref" : "AWS::StackId" }, "PropagateAtLaunch" : "true" }
        ]
      }
    },

    "KongScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "KongScalingGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },
    "KongScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "KongScalingGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },

    "CPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [ { "Ref": "KongScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "KongScalingGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [ { "Ref": "KongScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "KongScalingGroup" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },


    "ASGUpdateRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"ASGUpdateRole",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                {
                  "Action":[
                    "ec2:Describe*",
                    "cloudformation:DescribeStackResource"
                  ],
                  "Resource":[
                    "*"
                  ],
                  "Effect":"Allow"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ssm:DescribeAssociation",
                        "ssm:GetDeployablePatchSnapshotForInstance",
                        "ssm:GetDocument",
                        "ssm:GetManifest",
                        "ssm:GetParameters",
                        "ssm:ListAssociations",
                        "ssm:ListInstanceAssociations",
                        "ssm:PutInventory",
                        "ssm:PutComplianceItems",
                        "ssm:PutConfigurePackageResult",
                        "ssm:UpdateAssociationStatus",
                        "ssm:UpdateInstanceAssociationStatus",
                        "ssm:UpdateInstanceInformation"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ssmmessages:CreateControlChannel",
                        "ssmmessages:CreateDataChannel",
                        "ssmmessages:OpenControlChannel",
                        "ssmmessages:OpenDataChannel"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2messages:AcknowledgeMessage",
                        "ec2messages:DeleteMessage",
                        "ec2messages:FailMessage",
                        "ec2messages:GetEndpoint",
                        "ec2messages:GetMessages",
                        "ec2messages:SendReply"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "cloudwatch:PutMetricData"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ds:CreateComputer",
                        "ds:DescribeDirectories"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:DescribeLogGroups",
                        "logs:DescribeLogStreams",
                        "logs:PutLogEvents"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "s3:PutObject",
                        "s3:GetObject",
                        "s3:GetEncryptionConfiguration",
                        "s3:AbortMultipartUpload",
                        "s3:ListMultipartUploadParts",
                        "s3:ListBucket",
                        "s3:ListBucketMultipartUploads"
                    ],
                    "Resource": "*"
                },
                {
                  "Effect":"Allow",
                  "Action":"autoscaling:UpdateAutoScalingGroup",
                  "Resource":[
                    "*"
                  ]
                }
              ]
            }
          }
        ],
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Action":[
                "sts:AssumeRole"
              ],
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "ASGUpdateProfile":{
      "Type":"AWS::IAM::InstanceProfile",
      "Properties":{
        "Path":"/",
        "Roles":[
          {
            "Ref":"ASGUpdateRole"
          }
        ]
      }
    },
    "KongLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress" : false,
        "ImageId": {
          "Fn::FindInMap": [
            "RegionKongAmiMap",
            {
              "Ref": "AWS::Region"
            },
            "HVM"
          ]
        },
        "InstanceType": {
          "Ref": "KongInstanceType"
        },
        "KeyName": {
          "Ref": "KongKeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "KongSecurityGroup"
          }
        ],
        "IamInstanceProfile": {
          "Ref":"ASGUpdateProfile"
        }
      }
    },
    "KongSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP access on the inbound port",
        "VpcId" : { "Fn::If" : [ "CreateVpcResources", { "Ref" : "VPC" }, { "Ref" : "VpcId" } ] },
        "SecurityGroupIngress": [
          { "IpProtocol" : "tcp", "FromPort" : "8000", "ToPort" : "8000", "SourceSecurityGroupId" :  { "Ref" : "LoadBalancerSecurityGroup" } },
          { "IpProtocol" : "tcp", "FromPort" : "8001", "ToPort" : "8001", "SourceSecurityGroupId" :  { "Ref" : "LoadBalancerSecurityGroup" } },
          { "IpProtocol" : "tcp", "FromPort" : "8000", "ToPort" : "8000", "SourceSecurityGroupId" : { "Ref" : "MainSecurityGroupIds1" } },
          { "IpProtocol" : "tcp", "FromPort" : "8000", "ToPort" : "8000", "CidrIp" : "11.24.11.0/24" },
          { "IpProtocol" : "tcp", "FromPort" : "8001", "ToPort" : "8001", "CidrIp" : "11.24.11.0/24" },
          { "IpProtocol" : "tcp", "FromPort" : "8000", "ToPort" : "8000", "CidrIp" : "11.24.11.0/24" },
          { "IpProtocol" : "tcp", "FromPort" : "8001", "ToPort" : "8001", "CidrIp" : "11.24.11.0/24" },
          { "IpProtocol" : "tcp", "FromPort" : "8000", "ToPort" : "8000", "CidrIp" : "11.24.11.0/24" },
          { "IpProtocol" : "tcp", "FromPort" : "8001", "ToPort" : "8001", "CidrIp" : "11.24.11.0/24" },
          { "IpProtocol" : "tcp", "FromPort" : "8001", "ToPort" : "8001", "SourceSecurityGroupId" : { "Ref" : "MainSecurityGroupIds1" } },
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" :  { "Ref" : "LoadBalancerSecurityGroup" } },
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "SourceSecurityGroupId" : { "Ref" : "MainSecurityGroupIds1" } }
        ],
        "SecurityGroupEgress" :  [
          { "IpProtocol" : "tcp", "FromPort" : "1", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" }
        ]
      }
    },
    "Ingress7946": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId" : {
          "Fn::GetAtt" : [ "KongSecurityGroup", "GroupId" ]
        },
        "IpProtocol": "tcp", "FromPort": "7946", "ToPort": "7946",
        "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "KongSecurityGroup", "GroupId" ]
        }
      }
    },
    "DBSubnetGroup" : {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Condition" : "CreateRDS",
      "Properties" : {
        "DBSubnetGroupDescription" : "Subnets available for the RDS DB Instance",
        "SubnetIds" : { "Fn::If" : [ "CreateVpcResources", [ { "Ref" : "PrivateSubnet4" }, { "Ref" : "PrivateSubnet5" }, { "Ref" : "PrivateSubnet6" } ], [ { "Ref" : "SubnetId4DataA" }, { "Ref" : "SubnetId5DataB" }, { "Ref" : "SubnetId6DataC" } ] ] }
      }
    },
    "PostgresDB" : {
	  "Type" : "AWS::RDS::DBInstance",
      "Condition" : "CreateRDS",
      "Properties" : {
        "Engine" : "postgres",
        "DBName" : { "Ref" : "DBName" },
        "MasterUsername" : { "Ref" : "DBUsername" },
        "DBInstanceClass" : { "Ref" : "DBClass" },
        "AllocatedStorage" : { "Ref" : "DBAllocatedStorage" },
        "MasterUserPassword" : { "Ref" : "DBPassword" },
        "DBSubnetGroupName" : { "Ref" : "DBSubnetGroup" },
        "PubliclyAccessible" : {"Ref": "DBPublicAccess"},
        "EngineVersion" : {"Ref" : "DBVersion"},
        "DBSnapshotIdentifier" : {
          "Fn::If" : [
            "UseDbSnapshot",
            { "Ref" : "DBSnapshotIdentifier" },
            { "Ref" : "AWS::NoValue"}
          ]
        },
        "MultiAZ" : { "Ref" : "DBMultiAZ" },
        "StorageEncrypted" : { "Ref" : "DBStorageEncrypted" },
        "StorageType" : { "Ref" : "DBStorageType" },
        "VPCSecurityGroups": [
          {
            "Ref": "DBSecurityGroup"
          }
        ]
      },
      "DeletionPolicy" : "Snapshot"
    },
    "DBSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Condition" : "CreateRDS",
      "Properties" : {
        "GroupDescription" : "Database security groups",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort": "5432", "ToPort" : "5432", "SourceSecurityGroupId": {"Ref" : "DBSecurityGroupIds2"}},
          { "IpProtocol" : "tcp", "FromPort": "5432", "ToPort" : "5432", "SourceSecurityGroupId": {"Ref" : "MainSecurityGroupIds1"}},
          { "IpProtocol" : "tcp", "FromPort": "5432", "ToPort" : "5432", "CidrIp": "10.0.0.0/16" },
          { "IpProtocol" : "tcp", "FromPort" : "5432", "ToPort" : "5432", "CidrIp" : "11.24.11.0/24" },
          { "IpProtocol" : "tcp", "FromPort" : "5432", "ToPort" : "5432", "CidrIp" : "11.24.11.0/24" },
          { "IpProtocol" : "tcp", "FromPort" : "5432", "ToPort" : "5432", "CidrIp" : "11.24.11.0/24" },
          { "IpProtocol" : "tcp", "FromPort" : "53", "ToPort" : "53", "CidrIp" : "11.24.11.0/24" },
          { "IpProtocol" : "tcp", "FromPort" : "53", "ToPort" : "53", "CidrIp" : "11.24.11.0/24" },
          { "IpProtocol" : "tcp", "FromPort" : "53", "ToPort" : "53", "CidrIp" : "11.24.11.0/24" },
          { "IpProtocol" : "tcp", "FromPort": "53", "ToPort" : "53", "SourceSecurityGroupId": {"Ref" : "DBSecurityGroupIds2"}},
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "SourceSecurityGroupId" : { "Ref" : "MainSecurityGroupIds1" } }
        ],
        "SecurityGroupEgress" :  [
          { "IpProtocol" : "tcp", "FromPort" : "1", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" }
        ],
        "VpcId" : { "Fn::If" : [ "CreateVpcResources", { "Ref" : "VPC" }, { "Ref" : "VpcId" } ] }
      }
    },
    "ELBHostRecord": {
       "Type": "AWS::Route53::RecordSet",
       "Properties": {
          "HostedZoneName": {
             "Fn::Join": [
                "",
                [
                   {
                      "Ref": "DNSHostedZoneName"
                   },
                   "."
                ]
             ]
          },
          "Comment": "DNS name for my ELB.",
          "Name": {
             "Fn::Join": [
                "",
                [
                   {
                      "Ref": "SubdomainRecord"
                   },
                   ".",
                   {
                      "Ref": "AWS::Region"
                   },
                   ".",
                   {
                      "Ref": "DNSHostedZoneName"
                   },
                   "."
                ]
             ]
          },
          "Type": "CNAME",
          "TTL": "300",
          "ResourceRecords": [
             {
                "Fn::GetAtt": [
                   "KongLoadBalancerExistingVPC",
                   "DNSName"
                ]
             }
          ]
       }
    }
  },
  "Outputs": {
    "ProxyURL": {
      "Description": "Kong Proxy ELB URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https:\/\/",
            { "Fn::If" : [ "CreateVpcResources", { "Fn::GetAtt": [ "KongLoadBalancerNewVPC", "DNSName" ]}, { "Fn::GetAtt": [ "KongLoadBalancerExistingVPC", "DNSName" ] } ] },
            ":8443"
          ]
        ]
      }
    },
    "AdminURL": {
      "Description": "Kong Admin ELB URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https:\/\/",
            { "Fn::If" : [ "CreateVpcResources", { "Fn::GetAtt": [ "KongLoadBalancerNewVPC", "DNSName" ]}, { "Fn::GetAtt": [ "KongLoadBalancerExistingVPC", "DNSName" ] } ] },
            ":443"
          ]
        ]
      }
    },
    "Route53AdminURL": {
      "Description": "Kong Route53 Admin API register URL with protocl - 443",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https:\/\/",
            {  "Ref":  "ELBHostRecord" },
            ":443"
          ]
        ]
      }
    },
    "Route53ProxyURL": {
      "Description": "Kong Route53 Admin Proxy URL with protocol SSL - 8443",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https:\/\/",
            { "Ref": "ELBHostRecord" },
            ":8443"
          ]
        ]
      }
    }
  }
 }
