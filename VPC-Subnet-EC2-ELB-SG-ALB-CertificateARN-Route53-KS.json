{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "KSClass CloudFormation template.Template creates load balanced KSClass instances with Postgres RDS instance in a new VPC or user provided VPC",
"Parameters": {
  "VpcId" : {
    "Type" : "String",
    "Description" : "Optional - VPC Id of existing VPC. Leave blank to have a new VPC created",
    "Default" : "vpc-df8lkhlhjdad",
    "ConstraintDescription" : "VPC ID must begin with 'vpc-' or leave blank to have a new VPC created"
  },
  "SubnetId1AppA" : {
    "Type" : "String",
    "Description" : "Conditional- required if VpcId provided. Existing VPC Subnet Id 1 where EC2 instances will run",
    "Default" : "subnet-1e9876696986bg457",
    "ConstraintDescription" : "must be the Subnet Id of an existing Subnet ."
  },
  "SubnetId2AppB" : {
    "Type" : "String",
    "Description" : "Conditional- required if VpcId provided. Existing VPC Subnet 2 Id where EC2 instances will run",
    "Default" : "subnet-c987987kkjgg3da6",
    "ConstraintDescription" : "must be the Subnet Id of an existing Subnet ."
  },
  "SubnetId3AppC" : {
    "Type" : "String",
    "Description" : "Conditional- required if VpcId provided. Existing VPC Subnet Id 3 where EC2 instances will run",
    "Default" : "subnet-888766jjh65kjgjggdc1f",
    "ConstraintDescription" : "must be the Subnet Id of an existing Subnet ."
  },
"DNSHostedZoneName": {
   "Description": "The route53 HostedZoneName. For example, \"mydomain.com.\"  Don't forget the period at the end.",
   "Type": "String",
   "Default" : "ksclass.tk",
   "ConstraintDescription" : "must be the exact one what you're going to use the hosted zone.Default is example "
  },
  "SubdomainRecord": {
     "Description": "The subdomain of the dns entry. For example, hello -> hello.mydomain.com, hello is the subdomain.",
     "Type": "String",
     "Default" : "www",
     "ConstraintDescription" : "Can be used the subdomain record name as gcoConsultest .Default one is the example "
  },
"Certificate1ARN" : {
    "Type" : "String",
    "Description" : "The ARN for the first certificate of *.ksclass.tk",
    "Default" : "arn:aws:acm:us-west-2:857557576746464:certificate/guyt87687hhjhff-fdkjg2c-4277534-kjgkjd7-464fccgc8768758",
    "ConstraintDescription" : "must be the ARN of an existing certificate KSClass certificates"
 }
},

"Resources": {
"KSClassLoadBalancerExistingVPC" : {
  "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
  "Properties" : {
    "Subnets" : [{ "Ref" : "SubnetId1AppA" }, { "Ref" : "SubnetId2AppB" },{ "Ref" : "SubnetId3AppC" }],
    "Scheme": "internal",
    "SecurityGroups" :  [{ "Ref" : "LoadBalancerSecurityGroup" } ]
  }
},
"LoadBalancerListener": {
  "Type": "AWS::ElasticLoadBalancingV2::Listener",
  "Properties": {
    "DefaultActions": [{
      "Type": "forward",
      "TargetGroupArn": { "Ref": "ALBTargetGroup" }
    }],
    "LoadBalancerArn": { "Ref": "KSClassLoadBalancerExistingVPC" },
        "Port": 443,
        "Protocol": "HTTPS",
        "Certificates" : [
          { "CertificateArn" :
            { "Ref" : "Certificate1ARN"
            }
          }
        ]
      }
},
"ALBTargetGroup": {
  "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
  "Properties": {
    "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "ALBTargetGroup" ] ] },
    "Port": 3000,
    "Protocol": "HTTP",
    "UnhealthyThresholdCount" : 5,
    "HealthCheckIntervalSeconds" : 30,
    "HealthCheckTimeoutSeconds" : 5,
    "HealthyThresholdCount" : 3,
    "VpcId": { "Ref": "VpcId" }
  }
},

"LoadBalancerSecurityGroup" : {
  "Type" : "AWS::EC2::SecurityGroup",
  "Properties" : {
    "GroupDescription" : "Enable HTTP and HTTPS access on port 8443,8444,3000 and 8001",
    "VpcId" : { "Ref" : "VpcId" },
    "SecurityGroupIngress" : [
                     { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" },
                     { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" }
                              ],
    "SecurityGroupEgress" :  [
                    { "IpProtocol" : "tcp", "FromPort" : "1", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" }
                   ]
  }
},

"Route53HostRecord": {
   "Type": "AWS::Route53::RecordSet",
   "Properties": {
      "HostedZoneName": {
         "Fn::Join": [
            "",
            [
               {
                  "Ref": "DNSHostedZoneName"
               },
               "."
            ]
         ]
      },
      "Comment": "DNS name for my ELB.",
      "Name": {
         "Fn::Join": [
            "",
            [
               {
                  "Ref": "SubdomainRecord"
               },
               ".",
               {
                  "Ref": "DNSHostedZoneName"
               },
               "."
            ]
         ]
      },
      "Type": "CNAME",
      "TTL": "300",
      "ResourceRecords": [
         {
            "Fn::GetAtt": [
               "KSClassLoadBalancerExistingVPC",
               "DNSName"
            ]
         }
      ]
   }
 }
},
"Outputs": {
  "Route53AdminURL": {
    "Description": "KSClasslab Route53 DNS URL 443",
    "Value": {
      "Fn::Join": [
        "",
        [
          "https:\/\/",
          {  "Ref":  "Route53HostRecord" },
          ":443"
        ]
      ]
    }
  }
 }
}
